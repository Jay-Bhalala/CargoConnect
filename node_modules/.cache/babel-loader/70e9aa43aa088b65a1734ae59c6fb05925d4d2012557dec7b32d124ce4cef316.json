{"ast":null,"code":"var _jsxFileName = \"/Users/jaybhalala/Documents/GitHub/CargoConnect/src/Home.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Home() {\n  _s();\n  const [cargoListings, setCargoListings] = useState([]);\n  useEffect(() => {\n    // Define the URL of the API from which you want to fetch cargo listings\n    const apiUrl = 'https://api.example.com/cargo-listings'; // Replace with the actual API URL\n\n    // Make an HTTP GET request to fetch cargo listings\n    fetch(apiUrl).then(response => {\n      if (!response.ok) {\n        throw new Error(`Network response was not ok: ${response.status}`);\n      }\n      return response.json(); // Assuming the API returns JSON data\n    }).then(data => {\n      // Update the state with the fetched data\n      setCargoListings(data);\n    }).catch(error => {\n      console.error('Error fetching cargo listings:', error);\n    });\n  }, []); // The empty dependency array means this effect runs once when the component mounts\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 28,\n    columnNumber: 5\n  }, this);\n}\n_s(Home, \"QKzBt/KDMLE68BSoYTgREWnSBsc=\");\n_c = Home;\nexport default Home;\nvar _c;\n$RefreshReg$(_c, \"Home\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","Home","_s","cargoListings","setCargoListings","apiUrl","fetch","then","response","ok","Error","status","json","data","catch","error","console","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/jaybhalala/Documents/GitHub/CargoConnect/src/Home.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\n\nfunction Home() {\n  const [cargoListings, setCargoListings] = useState([]);\n\n  useEffect(() => {\n    // Define the URL of the API from which you want to fetch cargo listings\n    const apiUrl = 'https://api.example.com/cargo-listings'; // Replace with the actual API URL\n\n    // Make an HTTP GET request to fetch cargo listings\n    fetch(apiUrl)\n      .then((response) => {\n        if (!response.ok) {\n          throw new Error(`Network response was not ok: ${response.status}`);\n        }\n        return response.json(); // Assuming the API returns JSON data\n      })\n      .then((data) => {\n        // Update the state with the fetched data\n        setCargoListings(data);\n      })\n      .catch((error) => {\n        console.error('Error fetching cargo listings:', error);\n      });\n  }, []); // The empty dependency array means this effect runs once when the component mounts\n\n  return (\n    <div>\n      {/* Your other components and content */}\n    </div>\n  );\n}\n\nexport default Home;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEnD,SAASC,IAAIA,CAAA,EAAG;EAAAC,EAAA;EACd,MAAM,CAACC,aAAa,EAAEC,gBAAgB,CAAC,GAAGP,QAAQ,CAAC,EAAE,CAAC;EAEtDC,SAAS,CAAC,MAAM;IACd;IACA,MAAMO,MAAM,GAAG,wCAAwC,CAAC,CAAC;;IAEzD;IACAC,KAAK,CAACD,MAAM,CAAC,CACVE,IAAI,CAAEC,QAAQ,IAAK;MAClB,IAAI,CAACA,QAAQ,CAACC,EAAE,EAAE;QAChB,MAAM,IAAIC,KAAK,CAAE,gCAA+BF,QAAQ,CAACG,MAAO,EAAC,CAAC;MACpE;MACA,OAAOH,QAAQ,CAACI,IAAI,CAAC,CAAC,CAAC,CAAC;IAC1B,CAAC,CAAC,CACDL,IAAI,CAAEM,IAAI,IAAK;MACd;MACAT,gBAAgB,CAACS,IAAI,CAAC;IACxB,CAAC,CAAC,CACDC,KAAK,CAAEC,KAAK,IAAK;MAChBC,OAAO,CAACD,KAAK,CAAC,gCAAgC,EAAEA,KAAK,CAAC;IACxD,CAAC,CAAC;EACN,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC;;EAER,oBACEf,OAAA;IAAAiB,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAEK,CAAC;AAEV;AAAClB,EAAA,CA7BQD,IAAI;AAAAoB,EAAA,GAAJpB,IAAI;AA+Bb,eAAeA,IAAI;AAAC,IAAAoB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}